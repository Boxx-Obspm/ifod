%%----------------HEADER---------------------------%%
%Author:           Boris Segret
%Version & Date:
%                  Vxxx dd-mm-2016 (dd-mm-yyyy)
%                  - create a "prodObs" module (Produce Observable)
%                  - call the solution based on Observables only
%Version & Date:
%                  V1.2 03-03-2016, Boris Segret
%                  - *no* multiple calls of reference_trajectory.m
%                  - new "scenario" format, and computes only in an interval
%                  - minor adapations
%                  - works with a call from "ifod_tests"
%                  until V1   11-09-2015, Tristan Mallet
%CL=1
%
%
% This produces a timestep-by-timestep comparison between the actual trajectory,
% slightly different from a reference trajectory, and the trajectory that is
% reconstructed by the ifod on the solely basis of the (lat,long) of foreground
% bodies.
%
% I/
%    <scenario> scenario file (in VTS format) path must be given in datapath below
%               see User Manual to set the scenario file
     datapath='../ifod_tests/';
% O/
%    <results> comparison between actual and reconstructed trajectories
%              (VTS format, prefixed as requested in <scenario>)

%function [data]=data_extraction()

data=[];
MJD_0=2400000.5;
SEC_0=86400;
%for n=0 : 5 scenario=fopen(strcat('./Inputs/Scenarios/scenario-',num2str(n)),'r')
%scenario=fopen('./Inputs/Scenarios/scenario-4','r'); #we open the scenario file
scn=fopen(strcat(datapath, 'scenario'),'r'); %we open the scenario file
	l=' ';
	while 1
		l=fgetl(scn);
		if strfind(l,'META_STOP')>0 %We start reading the file from the META_STOP tag
			break;
		end;
	end;
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; scenario_num=lgn;
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; reftrajectory = strcat(datapath,lgn);
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; nbofBodies = str2num(lgn);
  for ii=1:nbofBodies
    % works with the last listed body only, yet
    l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end;
    refephemerid = strcat(datapath, lgn(12:length(lgn)));
  end
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; trajectory_name = strcat(datapath,lgn);
  for ii=1:nbofBodies
    % works with the last listed body only, yet
    l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end;
    trajectory_name_ephjup = strcat(datapath, lgn(12:length(lgn)));
  end
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; algo=lgn;
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; sampling = strcat(datapath,lgn);
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; outputs = strcat(datapath,lgn);
  l='#'; while l=='#' lgn=fgetl(scn); if length(lgn)>0 l=lgn(1); end; end; simLims = uint32(str2num(lgn));
fclose(scn);

%Extraction of the trajectory data
[TimeList0,lat0,long0,distance0,coordinates0,velocity0]=reference_trajectory(reftrajectory, refephemerid);
[TimeList1,lat1,long1,distance1,coordinates1,velocity1]=actual_trajectory(trajectory_name,trajectory_name_ephjup);

ii_MAX=length(TimeList1);

timeStep=fopen(strcat(datapath,sampling), 'r'); %we open the file timeStep-i
	l=' ';
	while 1
		l=fgetl(timeStep);
		if strfind(l,'META_STOP')>0
			break;
		end;
	end;
[sampling_data,nb] = fscanf(timeStep,'%g %g %g %g %g', [5 inf]);
sampling_data = sampling_data';
T=[sampling_data(:,1),sampling_data(:,2)]; fprintf("%15i %15i\n", T'); % we pick the sampling data and stock it in T and dt
dt=[sampling_data(:,3),sampling_data(:,4),sampling_data(:,5)]; fprintf("%5i %5i %5i\n", dt');
% Not tolerant to empty lines !!!
fclose(timeStep);

%--------- output preparations -----------
dataExtraction=fopen(outputs,'w');
fprintf(dataExtraction,'NAV_Results Version : 1.1\nGenerated by BIRDY NAV TEAM\nDate : %s\nalgo : %s\n\n', datestr(now), algo);
fprintf(dataExtraction,'OBJECT_NAME : BIRDY\nID_NAME : BIRDY\nSCENARIO : %s\nTRAJECTORY_NAME : %s\n\n',scenario_num, trajectory_name);
fprintf(dataExtraction,'META_START\n\n');
fprintf(dataExtraction,'Sampling of observations are changed at the following dates :\n');
fprintf(dataExtraction,'%15d%15f\n',T');
fprintf(dataExtraction,'\nSamplings (hours after previous obs) :\n');
fprintf(dataExtraction,'%15d%15d%15d\n',dt');
fprintf(dataExtraction,'\n\nCOLUMN #01 : Day of the date (in MJD)\n');
fprintf(dataExtraction,'COLUMN #02 : Seconds in the day (in seconds)\n');
fprintf(dataExtraction,'COLUMN #03 : Transversal difference between the reference and the actual trajectories (in km)\n');
fprintf(dataExtraction,'COLUMN #04 : Longitudinal difference between the reference and the actual trajectories (in km)\n');
fprintf(dataExtraction,'COLUMN #05 : Latitude difference of Jupiter between the reference trajectory point of view and the actual trajectory one (in degrees)\n');
fprintf(dataExtraction,'COLUMN #06 : Longitude difference of Jupiter between the reference trajectory point of view and the actual trajectory one(in degrees)\n');
fprintf(dataExtraction,'COLUMN #07 : Transversal Error (in km) of OD wrt actual trajectory\n');
fprintf(dataExtraction,'COLUMN #08 : Longitudinal Error (in km) of OD wrt actual trajectory\n');
fprintf(dataExtraction,'COLUMN #09 : Colinearity of speed (in degrees) during OD\n');
fprintf(dataExtraction,'COLUMN #10 : Uniformity of speed (in m/s) during OD\n');
fprintf(dataExtraction,'COLUMN #11 : Rank of A\n');
fprintf(dataExtraction,'COLUMN #12 : date 2 (in seconds)\n');
fprintf(dataExtraction,'COLUMN #13 : date 3 (in seconds)\n');
fprintf(dataExtraction,'COLUMN #14 : date 4 (in seconds)\n');
fprintf(dataExtraction,'COLUMN #15 : performance (in CPU seconds)\n');
fprintf(dataExtraction,'COLUMN #16 to #34 : Vector X (to be checked dx,dy,dz,dr in km and dV in km/s?)\n\n');
fprintf(dataExtraction, '   1            2           3           4           5           6           7           8      9        10   11         12          13          14              15          16          17          18          19          20          21          22          23          24          25          26          27          28          29          30          31          32          33          34\n');
fprintf(dataExtraction,'META_STOP\n');
fclose(dataExtraction);
%-----------------------------------------


Nobs = 4;
observd = double(zeros(Nobs,2)); % observd = [out_lat1 out_long1];
predict = double(zeros(Nobs,3)); % predict = [out_lat0 out_long0 out_distance0]
for ii = max([1 simLims(1)]) : simLims(2) : min([ii_MAX simLims(3)])
  epochs  = slctEpochs(Nobs, TimeList1(ii), T, dt); % from time_step
  % [timeStep]=time_step(ii,T,dt,trajectory_name,trajectory_name_ephjup);
  observd = extractObs(epochs, TimeList1, lat1, long1);
  predict = prepareObs(epochs, TimeList0, lat0, long0, distance0); % from on_board_interpolation
  %[epochs, predict(:,1), predict(:,2), predict(:,3), observd(:,1), observd(:,2)] = ...
  % on_board_interpolation (TimeList0, lat0, long0, distance0, ...
  %                      ii,timeStep, ...
  %                      TimeList1, lat1, long1);
  [X,A,B,elapsed_time] = computeSolution(epochs, observd, predict, algo);
  
  Xexp = expectedOD (TimeList0,distance0,coordinates0,velocity0, ...
                     epochs, ...
                     TimeList1,distance1,coordinates1,velocity1);
  %[dr,Dvectr,Dvelocity] = test_interpolation(TimeList0,distance0,coordinates0,velocity0, ...
  %                   epochs, ...
  %                   TimeList1,distance1,coordinates1,velocity1);
	%[Xexp] = Calculate_Xexpected(dr, Dvectr, Dvelocity);
	diff=X-Xexp;
	
	% Extraction of the day in MJD (integer):
	day=fix(TimeList1(ii)-MJD_0);
	
	% Extraction of the seconds
	sec=mod(TimeList1(ii)-MJD_0,1)*SEC_0;
	
	% Extraction of the transversal difference between the reference and the actual trajectories
  unitvvector = unit_speed_vector(ii,velocity1);
	trans_traj=norm(cross((coordinates1(ii,:)-coordinates0(ii,:))', unitvvector));
	
	% Extraction of the longitunal difference between the reference and the actual trajectories
	long_traj=dot((coordinates1(ii,:)-coordinates0(ii,:))', unitvvector);
	
	% Extraction of the latitude and the longitude differences of seeing Jupiter from the reference and actual trajectories
	lat_angle=lat1(ii)-lat0(ii);
	long_angle=long1(ii)-long0(ii);

	% Extraction of transversal error of OD wrt actual trajectory :
	trans_err=norm(cross(diff(1:3), unitvvector));

	% Extraction of longitudinal error of OD wrt actual trajectory :
	long_err=dot(diff(1:3), unitvvector);

	% Extraction of colinearity of the speed during OD
  vFinal(1)    = interp1(TimeList1, velocity1(:,1), epochs(Nobs), 'linear');
  vFinal(2)    = interp1(TimeList1, velocity1(:,2), epochs(Nobs), 'linear');
  vFinal(3)    = interp1(TimeList1, velocity1(:,3), epochs(Nobs), 'linear');
	%speed_angle=atan2(norm(cross(velocity1(ii,:), velocity1(ii+timeStep(1)+timeStep(2)+timeStep(3),:))), dot(velocity1(ii,:), velocity1(ii+timeStep(1)+timeStep(2)+timeStep(3),:)))*180/pi;
	speed_angle = acos( dot(velocity1(ii,:), vFinal) / (norm(velocity1(ii,:))*norm(vFinal)) )*180/pi;

	% Extraction of uniformity of the speed during OD
	norme=(norm(vFinal)-norm(velocity1(ii,:)));
	
	% Extraction of the rank of the A matrix
	A_rank=rank(A);
	
	% Extraction of the 3 next dates of the pictures
	%nxdates=[TimeList1(ii+timeStep(1))-MJD_0,TimeList1(ii+timeStep(1)+timeStep(2))-MJD_0,TimeList1(ii+timeStep(1)+timeStep(2)+timeStep(3))-MJD_0];
	nxdates=epochs(2:4)-MJD_0;
	
	% Extraction of the CPU time
	CPU=elapsed_time;
  
  %data=vertcat(data, [day,sec,trans_traj,long_traj,lat_angle,long_angle,trans_err,long_err,speed_angle,norme,A_rank,nxdates,CPU,X']); %we create the matrix using concatenation
  data=[day,sec,trans_traj,long_traj,lat_angle,long_angle,trans_err,long_err,speed_angle,norme,A_rank,nxdates,CPU,X']; %we create the matrix using concatenation
  %--------- output writing ----------------
  dataExtraction=fopen(outputs,'a');
  fprintf(dataExtraction, ['%0.3d %12.4f %11.3f %11.3f %11.3e %11.3e %11.3f %11.3f %6.3f %9.3f' ...
                        ' %3d %11.4f %11.4f %11.4f %15.3e' ...
                        ' %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f %11.3f' ...
                        ' %11.3f %11.3f %11.3f %11.3f %11.6f %11.6f %11.6f\n'], data');
  fclose(dataExtraction);
  %-----------------------------------------
end

